Arena Shooter Roguelite — Design Document
Project Lead: Laani
Setting: Fantasy, first-person shooter
Platform: PC (mouse + keyboard)
Visuals: Currently graybox, simple Unity VFX. Style to be determined.

Core Gameplay
Player is a first-person spellcaster, fighting waves of enemies in an arena.
No visible player character (just a visible wand/staff in view).
Movement is fast and vertical:
3 jumps (rechargeable by touching any surface, including walls/ceilings).
1 dash (meter under crosshair).
Goal: Player can “bounce” through arenas, rarely touching the floor if skilled.
Combat:
Spells are the primary weapons (see “Spells”).
Aiming is always towards a fixed crosshair at the center.
Enemies come in waves, attack with melee or ranged, and will eventually have complex patterns including flight and vertical pursuit.
Bosses will be important.
Controls & Camera
Mouse + Keyboard only.
First-person view only.
Camera never leaves player POV (no death cams, no cutscene zooms, etc.).
Spell switching: Number keys 1–9 for now, likely to be replaced with scroll wheel.
Firing:
Click to fire, hold to charge, and hold for “laser/beam” types.
Spells
5 spells currently (one starter + 4 others); more planned.
Spells are all ScriptableObjects for modularity.
Editable in the Unity Editor, not hardcoded in scripts.
Each spell can have unique firing mechanics (homing, chaining, area effects, piercing, etc.).
Current examples: chain lightning, poison AOE, piercing laser, shotgun ice with slow/freeze, homing starter.
No ammo or mana system yet (may be added later).
Expectation: All spells will have unique/wacky behaviors—don’t add “basic” for the sake of filler.
Upgrades / Roguelite Elements
Upgrades are a core loop:
Given as choices (likely “choose 1 of 3” on level/round up or after boss, etc.).
Upgrades modify spells (e.g., split shot, increased homing, status effects on hit) or add abilities.
Upgrades are per-run; persistency between runs is TBD and depends on future scope.
Unlockable spells and upgrades possible, alternate characters not planned.
No meta-progression systems or save system yet (planned later).
Enemies
Current: Placeholders, basic AI, chase and shoot.
Planned:
Enemies will use NavMesh for navigation, but need to be able to pursue the player vertically—no “safe” air camping.
Abilities: melee, ranged, flying, jumping, etc.
Bosses and mini-bosses will be key.
Wave system:
Triggered by kills or timers (TBD).
Room/arena-based progression, no huge persistent world.
Levels & Progression
Arena-based:
Instanced rooms/arenas, not open world or giant maps.
Small enough that a minimap isn’t needed.
Level design is focused on verticality, platforming, and skillful movement.
“Theme” levels (e.g., fire, ice) planned.
Random generation is a maybe; multiple hand-crafted levels more likely at first.
Transition:
No meta-hub or in-between area yet.
Possible future hub or between-level upgrade/shop moments.
UI/UX
HUD Elements:
Crosshair always visible.
HP bar.
Dash and jump meter below crosshair.
Spell/action bar for currently equipped spells.
Menus:
All handled via Unity Canvas and in-world menu UI.
No camera transitions for menus—strictly UI overlay.
Debugging:
Scripts should include clear comments and plenty of debug logs for troubleshooting.
Art & Audio
Art:
Grayboxing phase, no finished style yet.
VFX are Unity-made, simple, and functional.
Style will be kept simple for scope and readability.
Audio:
Not mentioned yet. (Add SFX/music later.)
Physics & Tech
Physics:
Used where needed (projectiles, movement, etc.).
No commitment to full rigidbody-based gameplay.
Input:
Check SimplePlayerController.cs for current setup.
Input system type not specified; check scripts for which system is in use (legacy vs new).
To Be Decided / Next Steps
Enemy AI improvements:
Vertical pathfinding and smarter behaviors.
Roguelite meta-progression:
To be designed after core gameplay is solid.
Save system:
To be implemented when there’s actually stuff to save.
Level generation vs hand-crafted:
Still open; depends on dev time and design needs.
Art style:
Still under consideration.
Miscellaneous
No visible player character body or hands, just weapon.
No plans for co-op, multiplayer, or alternate characters.
No need for minimap or complex navigation aids.
No hard “do nots” except: keep code modular, editable, and well-commented.
Script References / Notes
SimplePlayerController.cs — main reference for input, movement, and control setup.
Spells are ScriptableObjects.
Upgrades and spell effects are modular and should be extensible.
Debugging is a priority: prefer more logs and comments, especially for new/complex systems.
Final Note
The goal is a fun, vertical, “bounce around and zap stuff” fantasy FPS with wild spell synergies and roguelite upgrades.
Everything else is secondary.